;; (a)
(defun listMerge (a b)
  (labels ((helper (l) (if (null l) '()
                           (let ((sel (reduce #'min l)))
                             (cons sel (helper (remove sel l)))))))
      (helper (append a b (mapcar #'+ a b)))))

;; (b)
(defun searchTree (a tr)
  (cond ((null tr) NIL)
        ((= a (first tr)) 0)
        (t (let ((left (searchTree a (second tr))))
             (if left (1+ left)
                 (let ((right (searchTree a (third tr))))
                   (if right (1+ right) NIL)))))))

;; (c)
(defun deleteTree (a tr)
  (labels ((move-up (tr)
             (cond ((second tr) (list (first (second tr)) (move-up (second tr)) (third tr)))
                   ((third tr) (list (first (third tr)) (second tr) (move-up (third tr))))
                   (T NIL))))
    (cond ((null tr) NIL)
          ((= a (first tr)) (deleteTree a (move-up tr)))
          (T (list (first tr) (deleteTree a (second tr)) (deleteTree a (third tr)))))))

;; (d)
(defun functionList (a f)
  (cond ((null a) '())
        ((funcall f (first a)) (cons (funcall f (first a)) (functionList (rest a) f)))
        (T (functionList (rest a) f))))
